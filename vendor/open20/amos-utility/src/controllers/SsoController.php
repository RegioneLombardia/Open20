<?php

namespace open20\amos\utility\controllers;

use open20\amos\core\commands\LanguageSourceController;
use open20\amos\core\user\User;
use open20\amos\utility\models\SsoTokens;
use yii\caching\ApcCache;
use yii\caching\Cache;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\FileHelper;
use yii\helpers\Url;
use yii\httpclient\Client;
use yii\log\Logger;
use yii\web\Controller;
use Yii;
use yii\web\ForbiddenHttpException;
use yii\web\HttpException;
use yii\web\Response;

class SsoController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => [
                            'login',
                            'obtain',
                        ],
                        //'roles' => ['ADMIN']
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'login' => ['get'],
                    'obtain' => ['get'],
                ]
            ]
        ];
    }

    /**
     * @inheridoc
     */
    public function beforeAction($action)
    {
        switch ($action->id) {
            case 'obtain':
                {
                    \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                }
                break;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @param $token
     * @return Response
     * @throws HttpException
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function actionLogin($token)
    {
        if (!isset($this->module->params['master_domain'])) {
            throw new HttpException(402, 'This is Not allowed');
        }

        //Requested Url Data
        $pathUrl = parse_url(\Yii::$app->request->getAbsoluteUrl());

        //Override the base url for better UrlPath syntax
        $client = new Client(['baseUrl' => $this->module->params['master_domain']]);

        $response = $client->createRequest()
            ->setUrl(['/utility/sso/obtain'])
            ->setData([
                          'token' => $token,
                          'domain' => $pathUrl['host']
                      ])
            ->send();

        if (!$response->isOk) {
            \Yii::$app->log->logger
                ->log([
                          'event' => 'Attemted Login Via Master Token',
                          'result' => $response->getData()
                      ], Logger::LEVEL_ERROR);
        }

        //Parsed JSON data from master application
        $responseData = $response->getData();

        //Timeout login
        $loginTimeout = Yii::$app->params['loginTimeout'] ?: 3600;

        //Here you login as a selected user, it deppends on master application response
        if(isset($responseData['impersonate']) && !empty($responseData['impersonate'])) {
            $user = User::find()
                ->andWhere(['id' => $responseData['impersonate']])
                ->one();

            //Clear current user data (if any)
            Yii::$app->user->logout();

            //Login as user
            Yii::$app->user->login($user, $loginTimeout);

            //Go home
            return $this->goHome();
        }

        //TODO gestione degli utenti creandoli on-the-fly

        //Go home anyway
        return $this->goHome();
    }

    /**
     * @param $token
     * @param $domain
     * @return mixed
     * @throws HttpException
     * @throws \yii\base\InvalidConfigException
     */
    public function actionObtain($token, $domain)
    {
        //Find if there is any token for this request
        $ssoToken = SsoTokens::find()
            ->andWhere([
                           'token' => $token,
                           'domain' => $domain,
                       ])->one();

        //If found send data for user login or impersonation
        if ($ssoToken && $ssoToken->id) {
            //Resulting Data
            $result = $ssoToken->toArray();

            //Drop the token because is a single-use access token
            $ssoToken->delete();

            return $result;
        }

        throw new HttpException(402);
    }
}